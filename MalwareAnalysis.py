# -*- coding: utf-8 -*-
"""
Created on Mon Jul 16 01:10:56 2018

@author: TULIKA MITHAL
@NetID : txm172030

"""

# importing libraries

import sys
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
from keras.datasets import mnist
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
import itertools
import pandas as pd
import seaborn as sns



# function to print confusion matrix
def print_confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=14):
    
    df_cm = pd.DataFrame(
        confusion_matrix, index=class_names, columns=class_names, 
    )
    fig = plt.figure(figsize=figsize)
    try:
        heatmap = sns.heatmap(df_cm, annot=True, fmt="d")
    except ValueError:
        raise ValueError("Confusion matrix values must be integers.")
    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)
    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.show()
    return fig

# loading data
data = np.load(sys.argv[1])

# extracting the feature columns from dataset
data_x = data['arr'][:,0]

# extracting label column from dataset
data_y = data['arr'][:,1]


# preprocessing the data
l = []
for x in data_x:
    l.append(x)
    
data_x = np.array(l)


# splitting the dataset into training and test data
train_x, test_x, train_y, test_y = train_test_split(data_x, data_y, test_size=0.30, random_state=32)

# reshaping the data
train_x = train_x.reshape(train_x.shape[0],32,32,1).astype("float32")
test_x = test_x.reshape(test_x.shape[0],32,32,1).astype("float32")

# normalizing the data
train_x = train_x/255
test_x = test_x/255

l1 = []
for x in test_y:
    l1.append(x)
    
test_y_copy = np.array(l1)


# converting to one-hot vector
train_y = np_utils.to_categorical(train_y)
test_y = np_utils.to_categorical(test_y)

# getting number of classes
num_classes = test_y.shape[1]


# defining layers for convolution neural networks
def model_arc():
    model = Sequential()
    model.add(Conv2D(30,(3,3),padding='same',activation = "relu"))
    model.add(MaxPooling2D(pool_size = (2,2)))
    model.add(Conv2D(20,(2,2),activation = "relu"))
    model.add(MaxPooling2D(pool_size = (2,2)))
    model.add(Dropout(0.3))
    model.add(Flatten())
    model.add(Dense(128,activation = "relu"))
    model.add(Dense(num_classes,activation = "softmax"))
    model.compile(optimizer="adam",metrics=["accuracy"],loss="categorical_crossentropy")
    return model


model = model_arc()
# fitting the model
model.fit(train_x,train_y,validation_data=(test_x,test_y),epochs=15,batch_size=150,verbose=2)

#predicting the test data
predictions = model.predict_classes(test_x,batch_size = 50)

#accuracy_scores = model.evaluate(test_x,test_y,verbose=1)
#print("Accuracy Scores", accuracy_scores[1])
print(accuracy_score(test_y_copy, predictions))

model.summary()

cnf = confusion_matrix(test_y_copy,predictions)
print_confusion_matrix(cnf,[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])


